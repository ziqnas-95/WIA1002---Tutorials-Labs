package stacks_lab;public class PostfixEvaluation {    public static void main(String[] args)     {        System.out.println("Testing PostfixEvaluation:\n");        System.out.println("2 3 + 4 * 5 - : " + evaluatePostfix("2 3 + 4 * 5 -") + "\n");        System.out.println("2 3 * 4 2 - / 5 6 * + : " + evaluatePostfix("2 3 * 4 2 - / 5 6 * +") + "\n");        System.out.println("2 4 - 3 ^ 5 + : " + evaluatePostfix("2 4 - 3 ^ 5 +") + "\n");                System.out.println("\n\nDone.");    }  // end main        /** Evaluates a postfix expression.       @param postfix  a string that is a valid postfix expression.       @return  the value of the postfix expression. */    public static double evaluatePostfix(String postfix)   {        GenericStack<Double> valueStack = new GenericStack<>(); //creates a stack to store all the operands in the postfix        String[] tokens = postfix.split(" ");   //stores the expression into a form of array so that its iterable while also removing the space in between         for (String token: tokens) //iterates through the expression        {                   if(isNumeric(token)){   //boolean function to check if operator or operand                valueStack.push(Double.valueOf(token)); //if the static function returns true, the operand will be pushed into the stack             }            else if (token.equals("+") || token.equals("-") || token.equals("*")                 || token.equals("/") || token.equals("^")) //checks if the current token is an operator            {                   // algorithm if the token is found to be an operator                Double operandTwo = valueStack.pop();   //pop into x                Double operandOne = valueStack.pop();   //pop into y                Double result = compute(operandOne, operandTwo, token); //do calculation using x, y and the operator                valueStack.push(result);    //push the result (new operand) into the stack            }        } // end for              return (valueStack.peek());    } // end evaluatePostfix         public static boolean isNumeric(String str)    {         try         {             double d = Double.parseDouble(str);         }         catch(NumberFormatException nfe)         {             return false;         }         return true;     }     private static Double compute(Double operandOne, Double operandTwo, String operator)    {        double result;              result = switch (operator) {            case "+" -> operandOne + operandTwo;            case "-" -> operandOne - operandTwo;            case "*" -> operandOne * operandTwo;            case "/" -> operandOne / operandTwo;            case "^" -> Math.pow(operandOne, operandTwo);            default -> 0;        }; // Unexpected character        // end switch        return result;    } // end compute   } // end PostfixEvaluation    